type User @db(name: "user") {
  #  A unique identifier generated for the user and unique among all users.
  id: ID! @id
  createdAt: DateTime! @createdAt
  firstName: String!
  lastName: String!
  email: String! @unique
  password: String!
  image: String
}

type Meeting @db(name: "meeting") {
  #  A unique identifier generated for the user and unique among all meetings.
  id: ID! @id
  #  A unique identifier generated by the user and unique among all meetings.
  code: ID! @unique
}

type Message {
  #  The author object. Note: `authorId` is only available because we list it in `extraAttributes` in `Conversation.messages`
  author: User
  #  The message content.
  content: String!
  #  The id of the Conversation this message belongs to. This is the table primary key.
  conversationId: ID!
  #  The message timestamp. This is also the table sort key.
  createdAt: String
  #  Generated id for a message -- read-only
  id: ID!
  #  Flag denoting if this message has been accepted by the server or not.
  isSent: Boolean
  recipient: User
  sender: String
}

type Conversation {
  #  The Conversation's timestamp.
  createdAt: String
  #  A unique identifier for the Conversation.
  id: ID!
  #  The Conversation's messages.
  messages(after: String, first: Int): MessageConnection
  #  The Conversation's name.
  name: String!
}

type UserConversations {
  associated: [UserConversations]
  conversation: Conversation
  conversationId: ID!
  user: User
  userId: ID!
}

type MessageConnection {
  messages: [Message]
  conversation: Conversation
}
